package rtw.entity.gererAvis.avis.entity;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;

import rtw.entity.gererAvis.avis.avisAgence.entity.AvisAgence;
import rtw.entity.gererAvis.avis.interfaces.IAvis;
import rtw.entity.gererAvis.commentaire.entity.Commentaire;
import rtw.entity.gererAvis.entityTest.Item;
import rtw.entity.gererAvis.entityTest.Utilisateur;
import rtw.entity.gererAvis.note.entity.Note;


/**
 * Entity {@link DtoAvis} class mere abstraite de {@link AvisAgence} et {@link AvisItem}.
 * 
 * @author Aurélien
 * @version 1
 * @since 13/03/2017
 *
 */
@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)

public abstract class Avis implements IAvis,Serializable{
	
	
	/**
	 * Generated ID, need to be modified if Entity is modified
	 */
	private static final long serialVersionUID = 6100178318002055413L;

	/**
	 * TODO Récupération d'un utilisateur/Item + ID lié
	 * IdAvis est un double ID récupéré des fonctionnalité GererSite,GererItem grace a leur service respectif.
	 * 
	 * @author Aurélien
	 * @version 1
	 * @since 14/03/2017
	 *
	 */
	@Embeddable
	public static class IdAvis implements Serializable{

			/**
			 * TODO
			 * Serial generated by default regenerate it when class complete 
			 */
			private static final long serialVersionUID = 1L;
			
			@Column(unique=false)
			private String idUtilisateur;
			@Column(unique=false)
			private String idItem;
			
			/**
			 * Default constructor
			 */
			public IdAvis(){
				
			}
			
			/**
			 * Complete constructor 
			 * 
			 * @param idUtilisateur
			 * @param idItem
			 */
			public IdAvis(String idUtilisateur, String idItem) {
				
				super();
				this.idUtilisateur = idUtilisateur;
				this.idItem = idItem;
				
			}
			
			@Override
			public boolean equals(Object obj) {
			// TODO Auto-generated method stub
				return super.equals(obj);
			}
			
			@Override
			public int hashCode() {
			// TODO Auto-generated method stub
			return super.hashCode();
			}
	
			/**
			 * @return the idUtilisateur
			 */
			public String getIdUtilisateur() {
				
				return idUtilisateur;
				
			}
			
			/**
			 * @param idUtilisateur the idUtilisateur to set
			 */
			public void setIdUtilisateur(String idUtilisateur) {
				
				this.idUtilisateur = idUtilisateur;
				
			}
			
			/**
			 * @return the idItem
			 */
			public String getIdItem() {
				
				return idItem;
				
			}
			
			/**
			 * @param idItem the idItem to set
			 */
			public void setIdItem(String idItem) {
				
				this.idItem = idItem;
				
			}
	
			/** 
			 * Affichage de l'objet en string.
			 */
			@Override
			public String toString() {
				
				return getClass().getSimpleName() + "[getIdUtilisateur()=" + getIdUtilisateur() + ", getIdItem()=" + getIdItem() + "]";
				
			}
	}	
		
	@EmbeddedId
	private IdAvis idAvis;
	
	@OneToMany(fetch=FetchType.EAGER,cascade=CascadeType.ALL)
	
	private Collection<Note> notes = new ArrayList<Note>();
	
	@OneToOne(fetch=FetchType.EAGER,cascade=CascadeType.ALL)
	private Commentaire commentaire;
	
	//TODO CascadeType a modifier utiliser que pour test
	@OneToOne(fetch=FetchType.LAZY,cascade=CascadeType.PERSIST)
	private Utilisateur utilisateur;
	
	//TODO CascadeType a modifier utiliser que pour test
	@OneToOne(fetch=FetchType.LAZY,cascade=CascadeType.PERSIST)
	private Item item;

	/**
	 * Default constructor
	 */
	public Avis() {
		
	}
	
	/**
	 * Constructeur avec ID 
	 * 
	 * @param utilisateur {@link Utilisateur}
	 * @param item {@link Item}
	 */
	public Avis(Utilisateur utilisateur,Item item){
		
		getId().setIdItem(item.getIdItem());
		getId().setIdUtilisateur(utilisateur.getIdUtilisateur());
		
		setItem(item);
		setUtilisateur(utilisateur);
		
	}
	
	/**
	 * Retourne l'ID de l'avis.
	 * 
	 * @return idAvis {@link IdAvis}
	 */
	public IdAvis getId() {
		return idAvis;
	}
	
	/**
	 * Renseigne l'ID de l'avis.
	 * 
	 * @param idAvis {@link IdAvis}
	 */
	public void setId(Utilisateur utilisateur,Item item) {
		
		this.idAvis = new IdAvis(utilisateur.getIdUtilisateur(), item.getIdItem());
		
	}
	
	/**
	 * Retourne la note de l'avis.
	 * 
	 * @return note {@link Note}
	 */
	public Collection<Note> getNotes() {
		return notes;
	}
	
	/**
	 * Renseigne la note de l'avis.
	 * 
	 * @param note {@link Note}
	 */
	public void setNotes(Collection<Note> notes) {
		this.notes = notes;
	}
	
	/**
	 * Retourne le commentaire de l'avis.
	 * 
	 * @return commentaire {@link Commentaire}
	 */
	public Commentaire getCommentaire() {
		return commentaire;
	}
	
	/**
	 * Renseigne le commentaire de l'avis.
	 * 
	 * @param commentaire {@link Commentaire}
	 */
	public void setCommentaire(Commentaire commentaire) {
		this.commentaire = commentaire;
	}

	public Utilisateur getUtilisateur() {
		return utilisateur;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	public Item getItem() {
		return item;
	}

	public void setItem(Item item) {
		this.item = item;
	}

	/** 
	 * Affichage de l'objet en string
	 */
	@Override
	public String toString() {
		return getClass().getSimpleName() + "[getId()=" + getId() + ", getNote()=" + getNotes() + ", getCommentaire()=" + getCommentaire() + "]";
	}	
	
}
